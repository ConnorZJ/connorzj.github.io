[{"title":"Hello World","url":"/2023/07/28/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"StarRocks01 介绍StarRocks","url":"/2023/07/29/sr01-intro/","content":"什么是 StarRocksStarRocks是次世代极速全场景的 MPP（Massively Parallel Processing）数据库，产品目标是让数据分析变得快速和简单。\nStarRocks架构简洁，采用了全面向量化引擎，并且使用了新设计的 CBO（Cost Based Optimizer）优化器，查询速度（尤其是关联查询）远超同类产品（直接报了 ClickHouse 的身份证号）。\n适用场景OLAP 多维分析利用 StarRocks 的 MPP 和向量化执行引擎，可以在雪花模型、星型模型、星座模型等场景下，能够灵活的配置进行多维化组合分析。\n实时数据仓库StarRocks 设计和实现了 Primary-Key 模型，能够在秒级内同步数据库的变化，以此可以构建实时数仓的基础。\n高并发查询StarRocks 通过良好的数据分布特性，灵活的索引以及物化视图等特性，可以解决面向用户侧的分析场景。\n统一分析\n通过使用一套系统解决多维分析、高并发查询、预计算、实时分析查询等场景，降低系统复杂度和多技术栈开发与维护成本。\n使用 StarRocks 统一管理数据湖和数据仓库，将高并发和实时性要求很高的业务放在 StarRocks 中分析，也可以使用 External Catalog 和外部表进行数据湖上的分析。\n\n系统架构架构图\nStarRocks整个系统只包含两种进程，分别是 FE（Frontend） 和 BE（Backend）。\nFE：\n\n前端节点，负责管理元数据，管理客户端连接，进行查询规划、查询调度等任务\n每个 FE 节点都会在内存中保存一份元数据，依次可以达到每个节点都能够提供无差别服务\nFE 中包含三种角色：\nLeader：Leader 通过 Follower 选举产生，选举方式采用类 Paxos 的 Berkeley DB Java Edition协议。Leader 节点提供元数据读写服务，只有Leader 才有元数据的写权限。\nFollower：只有元数据的读权限，通过同步 Leader 的元数据日志来异步地同步元数据。Follower 还参与 Leader 。\nObserver：主要用于扩展集群的查询并发能力，与 Follower 相同的是一样同步 Leader 的元数据日志，与 Follower 不同的是不参与选举。\n\n\n\nBE：\n\nBE 是后端节点，负责数据的存储，执行 SQL的任务\nFE 按照一定的策略将数据分配到 BE 节点，BE 会导入数据，形成三个副本存储，并生成相关索引\n执行 SQL 的时候，会先将 SQL 解析成逻辑执行单元， 然后在各个 BE 节点上执行物理执行单元，这样的好处是可以达到不同的机器实现本地读取计算数据，避免数据的拷贝和传输，从而提高查询效率\n\n数据管理StarRocks 采用分区分桶策略，一张表通过规则划分出多个分区，比如粒度可以按照日期划分，一天、一周、一个月等。一个分区内的数据可以按照一列或者多列进行分桶，将数据切分出多个 tablet。tablet 是 StarRocks 中的最小数据管理单元，每个 tablet 都以多副本的方式（默认 3 副本）存储在不同的 BE 节点上。\n"},{"title":"StarRocks01 快速开始","url":"/2023/07/31/sr02-quickstart/","content":"本地部署 StarRocks\n由于这里是学习 StarRocks，所以使用 Docker 来部署一个单机版的服务\n\n本地部署 StarRocks，一共需要启动 FE 和 BE 两个进程。\n拉取镜像执行命令docker run starrocks/allin1-ubuntu\n启动 StarRocksdocker run -d -p 9030:9030 -p 8030:8030 -p 8040:8040 -itd starrocks/allin1-ubuntu\n\n执行以上命令即可启动 StarRocks 的 FE 和 BE，其中 9030 是 StarRocks 的 MySQL 协议通信端口，8030 和 8040 分别是 FE 和 BE 的 HTTP 通信端口，如果有端口冲突的话需要自行修改。\n连接 StarRocks"}]